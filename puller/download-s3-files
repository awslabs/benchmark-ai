#!/bin/bash

BUCKET=$1

declare -a HELP=("--help" "-h" "help")
if [[ " ${HELP[*]} " == *" $BUCKET "* ]]; then
    echo "Usage: $0 <S3Bucket> <FILE1>:<FILE2>:..."
    echo "  <Files> format: <S3Path>[,Permissions][,DOWNLOADPATH][,unpack]"
    exit 0
fi

USER_FILES=$2
FILES=(${USER_FILES//:/ })

#Ugly HACK to check if should be a dir.
#Brittle and unstable - yes, fails for filenames with PRE
is_prefix(){
    local S3FILE=$1
    pre=$(aws s3 ls s3://${BUCKET}/${S3FILE} | grep " PRE ")
    [ -n "${pre}" ] || return 1
}

for file in "${FILES[@]}"; do
    PIECES=(${file//,/ })

    S3FILE=${PIECES[0]}
    PERMS=${PIECES[1]}
    TARGET=${PIECES[2]}
    UNPACK=${PIECES[3]}

    echo "${file}"

    if [ "${S3FILE}" == "" ]; then
        echo " ---> No S3 file given for target ${file}, skipping"
        continue
    fi

    if [ "${TARGET}" == "" ]; then
        TARGET="/data/${S3FILE}"
        echo " ---> No download path for ${file}, assuming ${TARGET}"
    fi

    CMD="aws s3 cp s3://${BUCKET}/${S3FILE} ${TARGET}"
    is_prefix "$S3FILE" && CMD="aws s3 sync s3://${BUCKET}/${S3FILE} ${TARGET}"
    echo " ---> Executing: ${CMD}"
    eval $CMD

    if [ "${PERMS}" != "" ]; then
        echo " ---> Updating permissions ${TARGET}[${PERMS}]" 
        chmod ${PERMS} ${TARGET}
    fi

    if [ "${UNPACK}" != "" ]; then
        UNPACK_FOLDER=$(mktemp -d)
        tar -pxvf ${TARGET} -C ${UNPACK_FOLDER}
        rm ${TARGET}
        mv ${UNPACK_FOLDER} ${TARGET}

        if [ "${PERMS}" != "" ]; then
            echo " ---> Updating permissions ${TARGET}[${PERMS}]"
            chmod ${PERMS} ${TARGET}
            chmod -R ${PERMS} ${TARGET}
        fi
    fi
done
