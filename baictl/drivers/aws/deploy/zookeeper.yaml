#The file is a customization of 2 sources:
# https://kubernetes.io/docs/tutorials/stateful-application/zookeeper/ - example of zookeeper deployment
# https://github.com/kow3ns/kubernetes-zookeeper/tree/1.0-3.4.10/docker - example of zookeeper environment initialized
# from kubernetes stateful set

apiVersion: v1
kind: ConfigMap
metadata:
  name: entrypoints
  namespace: default
data:
  run.sh: |-
    #!/bin/bash

    readonly ZK_REPLICAS=$1
    readonly ZK_SERVER_PORT=${ZK_SERVER_PORT:-2888}
    readonly ZK_ELECTION_PORT=${ZK_ELECTION_PORT:-3888}

    HOST=$(hostname -s)
    DOMAIN=$(hostname -d)
    NAME=${HOSTNAME%%-*}

    function print_servers() {
      for (( i=1; i<=$ZK_REPLICAS; i++ ))
      do
          printf "server.$i=$NAME-$((i-1)).$DOMAIN:$ZK_SERVER_PORT:$ZK_ELECTION_PORT "
      done
    }

    export ZOO_SERVERS=$(print_servers)
    export ZOO_MY_ID=$((${HOST##*-}+1))

    echo "ZOO_SERVERS" $ZOO_SERVERS
    echo "ZOO_MY_ID" $ZOO_MY_ID

    #Let the entry point all other settings to /conf/zoo.cfg
    /docker-entrypoint.sh

    #Run zookeeper
    /zookeeper-3.4.13/bin/zkServer.sh start-foreground
  check.sh: |-
    #!/bin/bash
      readonly ZK_CLIENT_PORT=${ZK_CLIENT_PORT:-2181}
      OK=$(echo ruok | nc 127.0.0.1 $ZK_CLIENT_PORT)
      if [ "$OK" == "imok" ]; then
        exit 0
      else
        exit 1
      fi
---
#Hard-coded names. Invent a smarter way to do it ASAP
apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper
  namespace: default
data:
  connect: zookeeper-0.zookeeper-service.default.svc.cluster.local:2181,zookeeper-1.zookeeper-service.default.svc.cluster.local:2181,zookeeper-2.zookeeper-service.default.svc.cluster.local:2181
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
  labels:
    app: zookeeper
spec:
  ports:
    - port: 2888
      name: server
    - port: 3888
      name: leader-election
  clusterIP: None
  selector:
    app: zookeeper
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-cs
  labels:
    app: zookeeper
spec:
  ports:
    - port: 2181
      name: client
  selector:
    app: zookeeper
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: zookeeper-pdb
spec:
  selector:
    matchLabels:
      app: zookeeper
  maxUnavailable: 1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
spec:
  selector:
    matchLabels:
      app: zookeeper
  serviceName: zookeeper-service
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      nodeSelector:
        node.type: bai-services-cheap
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                      - zookeeper
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: kubernetes-zookeeper
          imagePullPolicy: Always
          image: "zookeeper:3.4.13"
          resources:
            requests:
              memory: "1Gi"
              cpu: "0.5"
          ports:
            - containerPort: 2181
              hostPort: 2181
              name: client
            - containerPort: 2888
              name: server
            - containerPort: 3888
              name: leader-election
          volumeMounts:
            - name: entrypoints
              mountPath: /opt/zookeeper
              readOnly: true
          command:
            - /opt/zookeeper/run.sh
            - "3"
          readinessProbe:
            exec:
              command:
                - "/opt/zookeeper/check.sh"
            initialDelaySeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                - "/opt/zookeeper/check.sh"
            initialDelaySeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: entrypoints
          configMap:
            defaultMode: 0755
            name: entrypoints

