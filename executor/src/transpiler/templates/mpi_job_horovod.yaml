apiVersion: v1
kind: ConfigMap
metadata:
  name: entrypoint-{job_id}
  namespace: default
  labels:
    benchmark: {job_id}
    action-id: {event.action_id}
    client-id: {event.client_id}
    created-by: {service_name}
data:
  entrypoint.sh: echo "Entrypoint"
  puller_entrypoint.sh: |-
    #!/bin/bash
    if [ "$ROLE" == "worker" ]; then
      /opt/puller/download-s3-files "$@"
    else
      echo "Not a worker - no data necessary"
    fi
---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: metrics-pusher-{job_id}
  namespace: default
  labels:
    benchmark: {job_id}
    action-id: {event.action_id}
    client-id: {event.client_id}
    created-by: {service_name}
subjects:
- kind: ServiceAccount
  name: {job_id}-launcher
  namespace: default
roleRef:
  kind: Role
  name: pod-status
  apiGroup: ""

---

apiVersion: kubeflow.org/v1alpha1
kind: MPIJob
metadata:
  name: {job_id}
  labels:
    app: benchmark-ai
    action-id: {event.action_id}
    client-id: {event.client_id}
    created-by: {service_name}
spec:
  replicas: {descriptor.num_instances}
  template:
    metadata:
      annotations:
        iam.amazonaws.com/role: benchmark-host
      labels:
        app: benchmark-ai
        action-id: {event.action_id}
        client-id: {event.client_id}
        created-by: {service_name}
    spec:
      serviceAccountName: metrics-pusher
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - benchmark-ai
            topologyKey: kubernetes.io/hostname
      initContainers:
      - name: data-puller
        image: {config.puller_docker_image}
        command: 
        - /bin/puller_entrypoint.sh
        volumeMounts:
        - name: entrypoints-volume
          mountPath: /bin/puller_entrypoint.sh
          readOnly: true
          subPath: puller_entrypoint.sh
        - name: datasets-volume
          mountPath: /data
        env:
        - name: ROLE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['mpi_role_type']
        - name: S3_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: outputs-infrastructure
              key: s3_endpoint
        # This environment variables are optional.
        # They reference a config map missing in DEVO/PROD.
        # Enable the integration tests
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            configMapKeyRef:
              name: s3
              key: access-key-id
              optional: true
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            configMapKeyRef:
              name: s3
              key: secret-access-key
              optional: true
      - name: script-puller
        image: {config.puller_docker_image}
        command:
          - /bin/puller_entrypoint.sh
        volumeMounts:
          - name: entrypoints-volume
            mountPath: /bin/puller_entrypoint.sh
            readOnly: true
            subPath: puller_entrypoint.sh
          - name: scripts-volume
            mountPath: /bai/scripts
        env:
          - name: ROLE
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['mpi_role_type']
          - name: S3_ENDPOINT
            valueFrom:
              configMapKeyRef:
                name: outputs-infrastructure
                key: s3_endpoint
          # This environment variables are optional.
          # They reference a config map missing in DEVO/PROD.
          # Enable the integration tests
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              configMapKeyRef:
                name: s3
                key: access-key-id
                optional: true
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              configMapKeyRef:
                name: s3
                key: secret-access-key
                optional: true
      containers:
      - image: {descriptor.docker_image}
        name: benchmark
        resources:
          limits:
            nvidia.com/gpu: {descriptor.gpus_per_instance}
        command: 
        - /bin/entrypoint.sh
        volumeMounts:
        - name: entrypoints-volume
          mountPath: /bin/entrypoint.sh
          readOnly: true
          subPath: entrypoint.sh
        - name: benchmark-ai
          mountPath: /tmp/benchmark-ai
        - mountPath: /bai/scipts
          name: scripts-volume
        env:
        - name: BENCHMARK_AI
          value: "fifo"
        - name: BENCHMARK_AI_FIFO_FILEPATH
          value: "/tmp/benchmark-ai/fifo"
        - name: BENCHMARK_AI_FIFO_MAX_WAIT_TIME
          value: "60"
      - name: sidecar
        image: {config.metrics_pusher_docker_image}
        env:
        - name: BENCHMARK_AI_FIFO_FILEPATH
          value: /tmp/benchmark-ai/fifo
        ##################################
        # Sidecar backend: Elasticsearch #
        ##################################
#        - name: BACKEND
#          value: elasticsearch
#        - name: BACKEND_ARG_JOB_ID
#          value: {job_id}
#        - name: BACKEND_ARG_HOSTNAME
#          valueFrom:
#            configMapKeyRef:
#              name: outputs-infrastructure
#              key: es_endpoint
#        - name: BACKEND_ARG_PORT
#          value: "443"

        ##########################
        # Sidecar backend: Kafka #
        ##########################
        - name: BACKEND
          value: kafka
        - name: BACKEND_ARG_JOB_ID
          value: {job_id}
        - name: BACKEND_ARG_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: outputs-infrastructure
              key: msk_bootstrap_brokers
        - name: BACKEND_ARG_KEY
          value: {event.client_id}
        - name: BACKEND_ARG_TOPIC
          value: BAI_METRICS


        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - mountPath: /tmp/benchmark-ai
          name: benchmark-ai
      volumes:
      - name: entrypoints-volume
        configMap:
          defaultMode: 0700
          name: entrypoint-{job_id}
      - name: benchmark-ai
        emptyDir: {{}}
      - name: datasets-volume
        emptyDir: {{}}
      - name: scripts-volume
        emptyDir: {{}}
      nodeSelector:
        beta.kubernetes.io/instance-type: {descriptor.instance_type}
        node.type: bai-worker
        failure-domain.beta.kubernetes.io/zone: {availability_zone}
