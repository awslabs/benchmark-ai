#!/bin/bash

#job_args = ["--src", task.src, "--dst", task.dst, "--zk-node-path", zk_node_path]

while [[ -n "$1" ]]; do
    case $1 in
        --src)
            shift
            SRC="${1}"
            ;;
        --dst)
            shift
            DST="${1}"
            ;;
        --zk-node-path)
            shift
            ZK_NODE_PATH="${1}"
            ;;
        *)
            shift
            echo "Unknown flag $1"
            ;;
    esac
    shift
done

ZK_CLI=zkCli.sh

[[ -z "$SRC" ]] && echo "--src is required" && exit 1
[[ -z "$DST" ]] && echo "--dst is required" && exit 1
[[ -z "$ZOOKEEPER_ENSEMBLE_HOSTS" ]] && echo "ZOOKEEPER_ENSEMBLE_HOSTS environment variable is required" && exit 1

trap 'echo "Caught SIGTERM" && WAS_TERMINATED="true"' SIGTERM

if [[ ${SRC} == *"delay"* ]]; then
    echo "Simulating delay"
    DELAY="10"
    [[ ${SRC} =~ delay=([0-9]+) ]] && echo ${BASH_REMATCH} && DELAY=${BASH_REMATCH[1]}
    echo "Will sleep for ${DELAY}s"
    sleep ${DELAY}s &
    wait $!
fi

RESULT="DONE"
MESSAGE=""
if [[ ${SRC} == *"fail"* ]]; then
  RESULT="FAILED"
  MESSAGE="Something bad"
fi

if [[ ${WAS_TERMINATED} == "true" ]]; then
  RESULT="FAILED"
  MESSAGE="Was terminated"
fi

JSON_RESULT="{\"status\":\"${RESULT}\", \"message\":\"$MESSAGE\"}"

echo "Reporting download of ${SRC} -> ${DST}:${JSON_RESULT}"

if [[ -n "$ZK_NODE_PATH" ]]; then
    echo "Updating ${ZK_NODE_PATH}"
    ${ZK_CLI} -server ${ZOOKEEPER_ENSEMBLE_HOSTS} set ${ZK_NODE_PATH} "${JSON_RESULT}"
    echo "I'm done"
fi
